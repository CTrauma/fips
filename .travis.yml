language: cpp
compiler: gcc
os: 
    - osx
    - linux

before_install:
    - echo $TRAVIS_OS_NAME

install:
    - echo $TRAVIS_OS_NAME
    # OSX tools
    - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install cmake; fi
    - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install ninja; fi
    - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install ccache; fi
    # Linux tools
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -qq ninja-build; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -qq ccache; fi

script:
    - echo $TRAVIS_OS_NAME
    # test fips command itself
    - python fips
    # clone hello world project
    - python fips clone https://github.com/floooh/fips-hello-world.git
    - cd ../fips-hello-world
    # test help command
    - python fips help
    - python fips help clone
    - python fips help config
    - python fips help init
    - python fips help open
    - python fips help setup
    - python fips help fips-hello-test
    - python fips help fips-hello-dep1
    # test list command
    - python fips help list
    - python fips list
    - python fips list all
    - python fips list configs
    - python fips list build-tools
    - python fips list build-types
    - python fips list platforms
    - python fips list generators
    - python fips list registry
    - python fips list settings
    - python fips list exports
    - python fips list imports
    - python fips list targets
    # test diag command
    - python fips help diag
    - python fips diag
    - python fips diag all
    - python fips diag fips
    - python fips diag tools
    - python fips diag configs
    - python fips diag imports
    # test fetch command
    - python fips help fetch
    - python fips fetch
    - python fips fetch fips-hello-dep2
    # test gen command
    - python fips help gen
    - python fips gen
    - if [ "$TRAVIS_OS_NAME" == "osx" ]; then python fips gen osx-xcode-release; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then python fips gen linux-make-release; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then python fips gen linux-ninja-release; fi
    - python fips list targets
    # test build command
    - python fips help build
    - python fips build
    - if [ "$TRAVIS_OS_NAME" == "osx" ]; then python fips build osx-xcode-release; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then python fips build linux-make-release; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then python fips build linux-ninja-release; fi
    # test run command
    - python fips help run
    - python fips run hello
    - if [ "$TRAVIS_OS_NAME" == "osx" ]; then python fips run hello osx-xcode-release; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then python fips run hello linux-make-release; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then python fips run hello linux-ninja-release; fi
    # test clean command
    - python fips help clean
    - python fips clean
    - if [ "$TRAVIS_OS_NAME" == "osx" ]; then python fips clean osx-xcode-release; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then python fips clean linux-make-release; fi
    - python fips clean all
    # test set command
    - python fips help set
    - if [ "$TRAVIS_OS_NAME" == "osx" ]; then python fips set config osx-xcode-release; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then python fips set config linux-make-release; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then python fips set ccache on; fi
    # test make command
    - python fips hello make
    - python fips make hello
    - python fips run hello
    - if [ "$TRAVIS_OS_NAME" == "osx" ]; then python fips make hello osx-xcode-debug; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then python fips make hello linux-make-debug; fi
    # test unset command
    - python fips help unset
    - python fips unset config
    - python fips unset ccache
